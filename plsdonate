--[[
    Optimized Pls Donate Auto Farm
    Fixed Booth Claim Version
]]

repeat task.wait() until game:IsLoaded()

if game.PlaceId ~= 8737602449 and game.PlaceId ~= 8943844393 then return end

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TPService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Variables
local Remotes
local uid = Players.LocalPlayer.UserId
local newRaisedFormat = Players.LocalPlayer:WaitForChild('leaderstats'):WaitForChild('Raised')
local httprequest = (syn and syn.request) or http and http.request or http_request or (fluxus and fluxus.request) or request

-- Find Remotes
for _,v in next, ReplicatedStorage:GetChildren() do
    if v.Name:find('Remote') and v:IsA('ModuleScript') then
        local suc = pcall(function() require(v).Event('PromotionBlimpGiftbux'):FireServer() end)
        if suc then Remotes = require(v); break end
    end
end

-- Anti-AFK
local VirtualUser = game:GetService('VirtualUser')
Players.LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Settings
getgenv().settings = {
    webhookBox = "https://discord.com/api/webhooks/1406631746941751336/lQWvRFWeL_o3Ffwte-zNZSctBiLVsHr8Asm4JUAfeJk1ojfznaxUOR2V21aHXNp8Nnob",
    webhookToggle = true,
    serverHopToggle = true,
    serverHopDelay = 15,
    boothPosition = 3
}

-- Webhook Function
local function webhook(raised, donor)
    if not getgenv().settings.webhookToggle then return end
    local url = getgenv().settings.webhookBox
    if not url or url == "" then return end
    
    local embed = {
        title = Players.LocalPlayer.Name .. " ðŸ’¸ just got donated!",
        description = string.format("**%d R$** by **%s**\nâ€¢ Total: %d R$", raised, donor, newRaisedFormat.Value),
        color = 0x2ECC71,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    
    local payload = HttpService:JSONEncode({embeds = {embed}})
    httprequest({
        Url = url,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = payload
    })
end

-- Server Hop Function
local function serverHop()
    local PlaceId = 8737602449
    local servers = {}
    
    local req = httprequest({
        Url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Desc&limit=100"
    })
    
    local body = HttpService:JSONDecode(req.Body)
    if body and body.data then
        for _, server in ipairs(body.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(servers, server.id)
            end
        end
    end
    
    if #servers > 0 then
        TPService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
    else
        TPService:Teleport(PlaceId)
    end
end

-- Booth Functions
local function findUnclaimedBooth()
    local boothUI
    if workspace:FindFirstChild("MapUI") then
        boothUI = workspace.MapUI:FindFirstChild("BoothUI")
    else
        local playerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
        boothUI = playerGui:WaitForChild("MapUIContainer"):WaitForChild("MapUI"):WaitForChild("BoothUI")
    end
    
    if not boothUI then return nil end
    
    for _, booth in ipairs(boothUI:GetChildren()) do
        if booth:FindFirstChild("Details") and booth.Details:FindFirstChild("Owner") then
            if booth.Details.Owner.Text == "unclaimed" then
                return tonumber(booth.Name:match("%d+"))
            end
        end
    end
    return nil
end

local function claimBooth(boothId)
    if not boothId then return false end
    
    local success = pcall(function()
        Remotes.Event("ClaimBooth"):InvokeServer(boothId)
    end)
    
    if success then
        -- Verify claim
        task.wait(1)
        local boothUI
        if workspace:FindFirstChild("MapUI") then
            boothUI = workspace.MapUI.BoothUI
        else
            boothUI = Players.LocalPlayer.PlayerGui.MapUIContainer.MapUI.BoothUI
        end
        
        local claimedBooth = boothUI:FindFirstChild("BoothUI" .. boothId)
        if claimedBooth and claimedBooth.Details.Owner.Text:find(Players.LocalPlayer.DisplayName) then
            return true
        end
    end
    
    return false
end

local function positionAtBooth(boothId)
    local character = Players.LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then return end
    
    -- Find booth interaction part
    for _, interact in ipairs(workspace.BoothInteractions:GetChildren()) do
        if interact:GetAttribute("BoothSlot") == boothId then
            local offset = CFrame.new(getgenv().settings.boothPosition, 0, 0)
            rootPart.CFrame = interact.CFrame * offset
            break
        end
    end
end

-- Main Execution
local function main()
    -- Wait for game to fully load
    task.wait(3)
    
    local boothId = findUnclaimedBooth()
    if not boothId then 
        warn("No unclaimed booth found, server hopping...")
        serverHop()
        return
    end
    
    print("Found unclaimed booth:", boothId)
    
    if claimBooth(boothId) then
        print("Successfully claimed booth:", boothId)
        positionAtBooth(boothId)
        
        -- Setup donation tracking
        local lastRaised = newRaisedFormat.Value
        newRaisedFormat.Changed:Connect(function()
            local newRaised = newRaisedFormat.Value
            local donationAmount = newRaised - lastRaised
            
            if donationAmount > 0 then
                -- Find donor
                local donor = "Unknown"
                local localChar = Players.LocalPlayer.Character
                if localChar and localChar:FindFirstChild("HumanoidRootPart") then
                    local localPos = localChar.HumanoidRootPart.Position
                    
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= Players.LocalPlayer and player.Character then
                            local playerChar = player.Character
                            if playerChar:FindFirstChild("HumanoidRootPart") then
                                local playerPos = playerChar.HumanoidRootPart.Position
                                local distance = (playerPos - localPos).Magnitude
                                if distance < 20 then
                                    donor = player.Name
                                    break
                                end
                            end
                        end
                    end
                end
                
                -- Send webhook
                webhook(donationAmount, donor)
                lastRaised = newRaised
                
                print("Donation received:", donationAmount, "from", donor)
            end
        end)
        
        -- Auto server hop
        if getgenv().settings.serverHopToggle then
            print("Server hopping in", getgenv().settings.serverHopDelay, "minutes")
            task.wait(getgenv().settings.serverHopDelay * 60)
            serverHop()
        end
        
    else
        warn("Failed to claim booth, server hopping...")
        serverHop()
    end
end

-- Start the script
main()
