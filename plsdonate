--[[
    Ultra Low FPS Pls Donate Auto Farm
    Smart Server Hop to 26 Players
]]

-- Check if already loaded
if getgenv().PlsDonateLoaded then
    return
end
getgenv().PlsDonateLoaded = true

-- Disable everything possible
if setfpscap then 
    setfpscap(5) 
end

-- Fast startup with minimal checks
if not game:IsLoaded() then 
    game.Loaded:Wait() 
end

if game.PlaceId ~= 8737602449 and game.PlaceId ~= 8943844393 then 
    getgenv().PlsDonateLoaded = false
    return 
end

-- Disable rendering completely
local RunService = game:GetService("RunService")
RunService:Set3dRenderingEnabled(false)

-- Minimal services only
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TPService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Core variables
local LocalPlayer = Players.LocalPlayer
local newRaisedFormat = LocalPlayer.leaderstats.Raised

-- Find remotes quickly
local Remotes
for _, v in pairs(ReplicatedStorage:GetChildren()) do
    if v.Name:find('Remote') and v:IsA('ModuleScript') then
        local suc, result = pcall(function() 
            return require(v) 
        end)
        if suc and result.Event then
            Remotes = result
            break
        end
    end
end

-- Ultra lightweight anti-AFK
local VirtualUser = game:GetService('VirtualUser')
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Hardcoded settings for maximum performance
local SETTINGS = {
    webhookBox = "https://discord.com/api/webhooks/1406631746941751336/lQWvRFWeL_o3Ffwte-zNZSctBiLVsHr8Asm4JUAfeJk1ojfznaxUOR2V21aHXNp8Nnob",
    boothPosition = 3,
    targetPlayers = 26 -- –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
}

-- Check if need to hop (less than or equal to 10 players)
local function shouldServerHop()
    return #Players:GetPlayers() <= 10
end

-- Find server with exactly 26 players
local function findTargetServer()
    local PlaceId = game.PlaceId
    local httprequest = (syn and syn.request) or http and http.request or http_request or request
    
    local req = httprequest({
        Url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Desc&limit=100"
    })
    
    if not req or not req.Body then return nil end
    
    local success, body = pcall(function()
        return HttpService:JSONDecode(req.Body)
    end)
    
    if not success or not body or not body.data then return nil end
    
    local targetServers = {}
    
    for _, server in ipairs(body.data) do
        if server.playing == SETTINGS.targetPlayers and server.id ~= game.JobId then
            table.insert(targetServers, server.id)
        end
    end
    
    if #targetServers > 0 then
        return targetServers[math.random(1, #targetServers)]
    end
    
    return nil
end

-- Keep trying to join target server
local function keepTryingServerHop()
    local attempts = 0
    local maxAttempts = 50 -- –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
    
    while attempts < maxAttempts do
        attempts += 1
        print("Attempting to find server with " .. SETTINGS.targetPlayers .. " players... (" .. attempts .. "/" .. maxAttempts .. ")")
        
        local targetServerId = findTargetServer()
        
        if targetServerId then
            print("Found target server, teleporting...")
            local success = pcall(function()
                TPService:TeleportToPlaceInstance(game.PlaceId, targetServerId, LocalPlayer)
            end)
            
            if success then
                print("Successfully teleported to target server!")
                return true
            else
                print("Teleport failed, retrying...")
            end
        else
            print("No server with " .. SETTINGS.targetPlayers .. " players found, waiting...")
        end
        
        wait(3) -- Wait 3 seconds before retry
    end
    
    print("Failed to find target server after " .. maxAttempts .. " attempts")
    return false
end

-- Non-blocking webhook
local function webhook(raised, donor)
    task.spawn(function()
        local httprequest = (syn and syn.request) or http and http.request or http_request or request
        if not httprequest then return end
        
        local embed = {
            title = LocalPlayer.Name .. " üí∏",
            description = string.format("**%d R$** by **%s**", raised, donor),
            color = 0x2ECC71
        }
        
        local success, payload = pcall(function()
            return HttpService:JSONEncode({embeds = {embed}})
        end)
        
        if success then
            pcall(httprequest, {
                Url = SETTINGS.webhookBox,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payload
            })
        end
    end)
end

-- Minimal booth finder
local function findUnclaimedBooth()
    local boothUI = workspace:FindFirstChild("MapUI") and workspace.MapUI:FindFirstChild("BoothUI")
    
    if not boothUI then 
        local playerGui = LocalPlayer:WaitForChild("PlayerGui")
        local mapContainer = playerGui:WaitForChild("MapUIContainer")
        local mapUI = mapContainer:WaitForChild("MapUI")
        boothUI = mapUI:WaitForChild("BoothUI")
    end
    
    if not boothUI then return nil end
    
    -- Check only first 5 booths
    local children = boothUI:GetChildren()
    for i = 1, math.min(5, #children) do
        local booth = children[i]
        if booth and booth:FindFirstChild("Details") then
            local details = booth.Details
            if details:FindFirstChild("Owner") and details.Owner.Text == "unclaimed" then
                local boothNum = booth.Name:match("%d+")
                if boothNum then
                    return tonumber(boothNum)
                end
            end
        end
    end
    return nil
end

-- Quick booth claim
local function claimBooth(boothId)
    if not boothId or not Remotes then return false end
    
    local success = pcall(function()
        Remotes.Event("ClaimBooth"):InvokeServer(boothId)
    end)
    
    if success then
        task.wait(0.3) -- Minimal wait
        return true
    end
    
    return false
end

-- Fast positioning
local function positionAtBooth(boothId)
    local character = LocalPlayer.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    for _, interact in pairs(workspace.BoothInteractions:GetChildren()) do
        if interact:GetAttribute("BoothSlot") == boothId then
            rootPart.CFrame = interact.CFrame * CFrame.new(SETTINGS.boothPosition, 0, 0)
            break
        end
    end
end

-- Ultra lightweight donation tracker
local lastRaised = newRaisedFormat.Value
local donationConnection
donationConnection = newRaisedFormat.Changed:Connect(function()
    local newRaised = newRaisedFormat.Value
    local donationAmount = newRaised - lastRaised
    
    if donationAmount > 0 then
        webhook(donationAmount, "Donor")
        lastRaised = newRaised
    end
end)

-- Main function with smart server hop
local function main()
    -- Wait for character
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end
    
    -- Check if need to server hop
    local currentPlayers = #Players:GetPlayers()
    print("Current players: " .. currentPlayers)
    
    if shouldServerHop() then
        print("Too few players (" .. currentPlayers .. "), searching for server with " .. SETTINGS.targetPlayers .. " players...")
        keepTryingServerHop()
        return
    end
    
    print("Good player count (" .. currentPlayers .. "), finding booth...")
    
    -- Quick attempt to claim booth
    local boothId = findUnclaimedBooth()
    
    if boothId and claimBooth(boothId) then
        print("Booth claimed successfully: " .. boothId)
        positionAtBooth(boothId)
        print("Ready for donations!")
        
    else
        print("Failed to claim booth, but staying on server")
    end
end

-- Disable graphics completely
task.spawn(function()
    pcall(function()
        for _, obj in pairs(game:GetDescendants()) do
            if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation") then
                obj.Material = "Plastic"
                if obj:IsA("Part") then
                    obj.Reflectance = 0
                end
            elseif obj:IsA("Decal") or obj:IsA("Texture") then
                obj:Destroy()
            elseif obj:IsA("ParticleEmitter") or obj:IsA("Fire") or obj:IsA("Smoke") then
                obj:Destroy()
            end
        end
    end)
end)

-- Reduce game settings
task.spawn(function()
    pcall(function()
        local Lighting = game:GetService("Lighting")
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 100000
    end)
end)

-- Start with absolute minimum overhead
task.defer(main)

-- Clean up when leaving
game:BindToClose(function()
    if donationConnection then
        donationConnection:Disconnect()
    end
    getgenv().PlsDonateLoaded = false
end)
