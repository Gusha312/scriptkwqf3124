--[[
    Ultra Low FPS Pls Donate Auto Farm
    Fixed Teleport to Booth
]]

-- Check if already loaded
if getgenv().PlsDonateLoaded then
    return
end
getgenv().PlsDonateLoaded = true

-- Disable everything possible
if setfpscap then 
    setfpscap(5) 
end

-- Fast startup with minimal checks
if not game:IsLoaded() then 
    game.Loaded:Wait() 
end

if game.PlaceId ~= 8737602449 and game.PlaceId ~= 8943844393 then 
    getgenv().PlsDonateLoaded = false
    return 
end

-- Disable rendering completely
local RunService = game:GetService("RunService")
RunService:Set3dRenderingEnabled(false)

-- Minimal services only
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TPService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Core variables
local LocalPlayer = Players.LocalPlayer
local newRaisedFormat = LocalPlayer.leaderstats.Raised

-- Find remotes properly
local Remotes
for _, v in pairs(ReplicatedStorage:GetChildren()) do
    if v.Name:find('Remote') and v:IsA('ModuleScript') then
        local suc, result = pcall(function() 
            return require(v) 
        end)
        if suc and type(result) == "table" and result.Event then
            Remotes = result
            break
        end
    end
end

if not Remotes then
    warn("Failed to find Remotes!")
    getgenv().PlsDonateLoaded = false
    return
end

-- Ultra lightweight anti-AFK
local VirtualUser = game:GetService('VirtualUser')
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- Hardcoded settings for maximum performance
local SETTINGS = {
    webhookBox = "https://discord.com/api/webhooks/1406631746941751336/lQWvRFWeL_o3Ffwte-zNZSctBiLVsHr8Asm4JUAfeJk1ojfznaxUOR2V21aHXNp8Nnob",
    boothPosition = 3,
    targetPlayers = 26
}

-- Check if need to hop (less than or equal to 10 players)
local function shouldServerHop()
    return #Players:GetPlayers() <= 10
end

-- Find server with exactly 26 players
local function findTargetServer()
    local PlaceId = game.PlaceId
    local httprequest = (syn and syn.request) or http and http.request or http_request or request
    
    local req = httprequest({
        Url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Desc&limit=100"
    })
    
    if not req or not req.Body then return nil end
    
    local success, body = pcall(function()
        return HttpService:JSONDecode(req.Body)
    end)
    
    if not success or not body or not body.data then return nil end
    
    local targetServers = {}
    
    for _, server in ipairs(body.data) do
        if server.playing == SETTINGS.targetPlayers and server.id ~= game.JobId then
            table.insert(targetServers, server.id)
        end
    end
    
    if #targetServers > 0 then
        return targetServers[math.random(1, #targetServers)]
    end
    
    return nil
end

-- Keep trying to join target server
local function keepTryingServerHop()
    local attempts = 0
    local maxAttempts = 50
    
    while attempts < maxAttempts do
        attempts += 1
        print("Attempting to find server with " .. SETTINGS.targetPlayers .. " players... (" .. attempts .. "/" .. maxAttempts .. ")")
        
        local targetServerId = findTargetServer()
        
        if targetServerId then
            print("Found target server, teleporting...")
            local success = pcall(function()
                TPService:TeleportToPlaceInstance(game.PlaceId, targetServerId, LocalPlayer)
            end)
            
            if success then
                print("Successfully teleported to target server!")
                return true
            else
                print("Teleport failed, retrying...")
            end
        else
            print("No server with " .. SETTINGS.targetPlayers .. " players found, waiting...")
        end
        
        wait(3)
    end
    
    print("Failed to find target server after " .. maxAttempts .. " attempts")
    return false
end

-- FIXED Webhook function
local function webhook(raised, donor)
    local httprequest = (syn and syn.request) or http and http.request or http_request or request
    if not httprequest then 
        print("HTTP request not available")
        return 
    end
    
    local embed = {
        title = LocalPlayer.Name .. " ðŸ’¸ Donation",
        description = string.format("**%d R$** by **%s**\nTotal: **%d R$**", raised, donor, newRaisedFormat.Value),
        color = 0x00FF00,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    
    local success, payload = pcall(function()
        return HttpService:JSONEncode({
            embeds = {embed},
            username = "Pls Donate Notifier",
            avatar_url = "https://tr.rbxcdn.com/5c6bfb615d90b8b71b3d4b8e3d5d1f3a/420/420/Image/Png"
        })
    end)
    
    if not success then
        print("Failed to encode webhook payload")
        return
    end
    
    local response = pcall(function()
        return httprequest({
            Url = SETTINGS.webhookBox,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = payload
        })
    end)
    
    if response then
        print("Webhook sent successfully! Donation: " .. raised .. " from " .. donor)
    else
        print("Failed to send webhook")
    end
end

-- FIXED Booth finder - more reliable
local function findUnclaimedBooth()
    local boothUI = workspace:FindFirstChild("MapUI") and workspace.MapUI:FindFirstChild("BoothUI")
    
    if not boothUI then 
        local playerGui = LocalPlayer:WaitForChild("PlayerGui")
        local mapContainer = playerGui:WaitForChild("MapUIContainer")
        local mapUI = mapContainer:WaitForChild("MapUI")
        boothUI = mapUI:WaitForChild("BoothUI")
    end
    
    if not boothUI then 
        print("BoothUI not found!")
        return nil 
    end
    
    print("Searching for unclaimed booth...")
    
    -- Check all booths more carefully
    for _, booth in pairs(boothUI:GetChildren()) do
        if booth:IsA("Frame") and booth.Name:find("BoothUI") then
            local details = booth:FindFirstChild("Details")
            if details then
                local owner = details:FindFirstChild("Owner")
                if owner and owner.Text == "unclaimed" then
                    local boothNum = booth.Name:match("%d+")
                    if boothNum then
                        print("Found unclaimed booth: " .. boothNum)
                        return tonumber(boothNum)
                    end
                end
            end
        end
    end
    
    print("No unclaimed booths found")
    return nil
end

-- FIXED Booth claim with verification
local function claimBooth(boothId)
    if not boothId or not Remotes then 
        print("Invalid booth ID or no Remotes")
        return false 
    end
    
    print("Attempting to claim booth: " .. boothId)
    
    local success, result = pcall(function()
        return Remotes.Event("ClaimBooth"):InvokeServer(boothId)
    end)
    
    if success then
        print("Booth claim request sent, verifying...")
        task.wait(1) -- Wait for verification
        
        -- Verify booth was actually claimed
        local boothUI = workspace:FindFirstChild("MapUI") and workspace.MapUI.BoothUI
                      or LocalPlayer.PlayerGui.MapUIContainer.MapUI.BoothUI
        
        if boothUI then
            local claimedBooth = boothUI:FindFirstChild("BoothUI" .. boothId)
            if claimedBooth and claimedBooth.Details and claimedBooth.Details.Owner then
                if claimedBooth.Details.Owner.Text:find(LocalPlayer.DisplayName) then
                    print("Booth successfully claimed and verified!")
                    return true
                else
                    print("Booth claim verification failed - Owner: " .. claimedBooth.Details.Owner.Text)
                end
            else
                print("Claimed booth not found in UI")
            end
        end
    else
        print("Booth claim failed: " .. tostring(result))
    end
    
    return false
end

-- FIXED Teleport to booth - SIMPLE VERSION
local function teleportToBooth(boothId)
    local character = LocalPlayer.Character
    if not character then 
        print("No character found")
        return false
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then 
        print("No humanoid or root part found")
        return false
    end
    
    print("Looking for booth interaction: " .. boothId)
    
    -- Find the booth interaction part
    for _, interact in pairs(workspace.BoothInteractions:GetChildren()) do
        if interact:GetAttribute("BoothSlot") == boothId then
            print("Found booth interaction at: " .. tostring(interact.Position))
            
            -- SIMPLE TELEPORT - just set CFrame directly
            local targetCFrame = interact.CFrame * CFrame.new(SETTINGS.boothPosition, 0, 0)
            print("Teleporting to: " .. tostring(targetCFrame.Position))
            
            -- Set CFrame directly (bypasses any movement restrictions)
            rootPart.CFrame = targetCFrame
            
            -- Wait a bit and verify
            task.wait(0.5)
            
            local distance = (rootPart.Position - interact.Position).Magnitude
            print("Teleport completed. Distance to booth: " .. math.floor(distance))
            
            if distance < 10 then
                print("Successfully teleported to booth!")
                return true
            else
                print("Teleport may have failed, distance too far: " .. distance)
                return false
            end
        end
    end
    
    print("Booth interaction not found for slot: " .. boothId)
    return false
end

-- FIXED Donation tracker
local lastRaised = newRaisedFormat.Value
local donationConnection
donationConnection = newRaisedFormat.Changed:Connect(function()
    local newRaised = newRaisedFormat.Value
    local donationAmount = newRaised - lastRaised
    
    if donationAmount > 0 then
        print("Donation detected: " .. donationAmount .. " R$")
        
        -- Find donor
        local donor = "Unknown"
        local localChar = LocalPlayer.Character
        if localChar then
            local localRoot = localChar:FindFirstChild("HumanoidRootPart")
            if localRoot then
                local localPos = localRoot.Position
                
                for _, player in Players:GetPlayers() do
                    if player ~= LocalPlayer then
                        local playerChar = player.Character
                        if playerChar then
                            local playerRoot = playerChar:FindFirstChild("HumanoidRootPart")
                            if playerRoot and (playerRoot.Position - localPos).Magnitude < 20 then
                                donor = player.Name
                                break
                            end
                        end
                    end
                end
            end
        end
        
        print("Sending webhook for donation from: " .. donor)
        webhook(donationAmount, donor)
        lastRaised = newRaised
    end
end)

-- Main function with better error handling
local function main()
    print("Script starting...")
    
    -- Wait for character
    if not LocalPlayer.Character then
        print("Waiting for character...")
        LocalPlayer.CharacterAdded:Wait()
        task.wait(1) -- Wait for character to fully load
    end
    
    -- Make sure we have humanoid
    if not LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        print("Waiting for humanoid...")
        repeat task.wait() until LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    end
    
    -- Check if need to server hop
    local currentPlayers = #Players:GetPlayers()
    print("Current players: " .. currentPlayers)
    
    if shouldServerHop() then
        print("Too few players (" .. currentPlayers .. "), searching for server with " .. SETTINGS.targetPlayers .. " players...")
        keepTryingServerHop()
        return
    end
    
    print("Good player count (" .. currentPlayers .. "), finding booth...")
    
    -- Try to claim booth with retries
    local boothId = findUnclaimedBooth()
    
    if boothId then
        local claimed = claimBooth(boothId)
        
        if claimed then
            print("Attempting to teleport to booth...")
            local teleportSuccess = teleportToBooth(boothId)
            
            if teleportSuccess then
                print("Ready for donations! Booth: " .. boothId)
                
                -- Test webhook
                print("Testing webhook...")
                webhook(1, "TestDonor")
            else
                print("Failed to teleport to booth, but booth is claimed")
            end
        else
            print("Failed to claim booth after verification")
        end
    else
        print("No booth available")
    end
end

-- Disable graphics completely
task.spawn(function()
    pcall(function()
        for _, obj in pairs(game:GetDescendants()) do
            if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("UnionOperation") then
                obj.Material = "Plastic"
                if obj:IsA("Part") then
                    obj.Reflectance = 0
                end
            elseif obj:IsA("Decal") or obj:IsA("Texture") then
                obj:Destroy()
            elseif obj:IsA("ParticleEmitter") or obj:IsA("Fire") or obj:IsA("Smoke") then
                obj:Destroy()
            end
        end
    end)
end)

-- Reduce game settings
task.spawn(function()
    pcall(function()
        local Lighting = game:GetService("Lighting")
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 100000
    end)
end)

-- Start with absolute minimum overhead
task.defer(main)

-- Clean up when leaving
game:BindToClose(function()
    if donationConnection then
        donationConnection:Disconnect()
    end
    getgenv().PlsDonateLoaded = false
end)
