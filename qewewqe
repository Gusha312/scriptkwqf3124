local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local HttpService = game:GetService('HttpService')

local localPlayer = Players.LocalPlayer
local TELEGRAM_BOT_TOKEN = '8499812762:AAHgYFVkfvCi6HL3HetOcYHuuaDfxVUINT0' -- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

-- –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å—É—â–µ—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã)
local ALLOWED_CREATURES = {
    'Asilvestrela',
    'Moluna',
    'Starlit',
    'Voletexius',
    'Elarickkeir',
    'Empiterium',
    'Erridea',
    'Eskarlor',
    'Golgaroth',
    'Jhiggo-Jangl',
    'Leurimess',
}

-- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏)
local lastUpdateId = 0

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
local function loadLastUpdateId()
    -- –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ DataStore –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    local success, savedId = pcall(function()
        -- –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ DataStore, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
        -- –ò–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        return 0 -- –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    end)
    
    return success and savedId or 0
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ update_id
local function saveLastUpdateId(updateId)
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    lastUpdateId = updateId
    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ DataStore –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
end

-- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
lastUpdateId = loadLastUpdateId()
print("üìù –ó–∞–≥—Ä—É–∂–µ–Ω lastUpdateId: " .. lastUpdateId)

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤–æ
local function isCreatureAllowed(creatureName)
    for _, allowedCreature in ipairs(ALLOWED_CREATURES) do
        if creatureName == allowedCreature then
            return true
        end
    end
    return false
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
local function sendToTelegram(chat_id, message)
    local url = 'https://api.telegram.org/bot'
        .. TELEGRAM_BOT_TOKEN
        .. '/sendMessage'

    local success, response = pcall(function()
        return request({
            Url = url,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = HttpService:JSONEncode({
                chat_id = chat_id,
                text = message,
                parse_mode = 'HTML',
            }),
        })
    end)

    if success then
        print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
        return true
    else
        warn(
            '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: '
                .. tostring(response)
        )
        return false
    end
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
local function checkTelegramMessages()
    local url = 'https://api.telegram.org/bot'
        .. TELEGRAM_BOT_TOKEN
        .. '/getUpdates?offset='
        .. (lastUpdateId + 1)
        .. '&timeout=10' -- –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    print("üîç –ó–∞–ø—Ä–æ—Å –∫ Telegram API: offset=" .. (lastUpdateId + 1))

    local success, response = pcall(function()
        return request({
            Url = url,
            Method = 'GET',
            Headers = {
                ['Content-Type'] = 'application/json'
            }
        })
    end)

    if not success then
        warn("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: " .. tostring(response))
        return {}
    end

    if not response or not response.Body then
        warn("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        return {}
    end

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
    if response.Body == "" or response.Body == "{}" then
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
        return {}
    end

    -- –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    local ok, data = pcall(function()
        return HttpService:JSONDecode(response.Body)
    end)

    if not ok then
        warn("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " .. tostring(data))
        warn("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: " .. response.Body)
        return {}
    end

    if not data then
        warn("‚ùå –ü—É—Å—Ç–æ–π data –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return {}
    end

    if data.ok == false then
        warn("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Telegram API: " .. tostring(data.description))
        return {}
    end

    if not data.ok or not data.result then
        warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram")
        return {}
    end

    if #data.result == 0 then
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (result –ø—É—Å—Ç–æ–π)")
        return {}
    end

    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ " .. #data.result .. " –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    -- –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π update_id –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    local maxUpdateId = lastUpdateId
    for _, update in ipairs(data.result) do
        if update.update_id > maxUpdateId then
            maxUpdateId = update.update_id
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π update_id
    if maxUpdateId > lastUpdateId then
        saveLastUpdateId(maxUpdateId)
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π lastUpdateId: " .. maxUpdateId)
    end

    return data.result
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞)
local function getCreaturesData(dataTable, includeZeros)
    local result = {}

    if dataTable then
        for _, value in pairs(dataTable:GetChildren()) do
            if isCreatureAllowed(value.Name) then
                if value:IsA('IntValue') or value:IsA('NumberValue') then
                    if includeZeros or value.Value > 0 then
                        result[value.Name] = value.Value
                    end
                elseif
                    value:IsA('BoolValue') and (value.Value or includeZeros)
                then
                    result[value.Name] = value.Value and '‚úì' or '‚úó'
                end
            end
        end
    end

    return result
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤ (–≤—Å–µ —Ç–æ–∫–µ–Ω—ã)
local function getTokensData(dataTable)
    local result = {}

    if dataTable then
        for _, value in pairs(dataTable:GetChildren()) do
            if value:IsA('IntValue') or value:IsA('NumberValue') then
                if value.Value > 0 then
                    result[value.Name] = value.Value
                end
            elseif value:IsA('BoolValue') and value.Value then
                result[value.Name] = '‚úì'
            end
        end
    end

    return result
end

-- –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
local function collectStats()
    local stats = {
        mushrooms = localPlayer.Data.Coins.Value, -- –ì—Ä–∏–±—ã
        creatures = getCreaturesData(localPlayer.Data.Unlocks, true), -- –°—É—â–µ—Å—Ç–≤–∞
        tokens = getTokensData(localPlayer.Data.Items), -- –¢–æ–∫–µ–Ω—ã,
    }
    return stats
end

-- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
local function formatStats(stats)
    local message = 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n\n'
    message = message .. 'üë§ <b>–ò–≥—Ä–æ–∫:</b> ' .. localPlayer.Name .. '\n'
    message = message .. 'üçÑ <b>–ì—Ä–∏–±—ã:</b> ' .. stats.mushrooms .. '\n\n'

    -- –°—É—â–µ—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
    if next(stats.creatures) then
        message = message .. 'üêâ <b>–°—É—â–µ—Å—Ç–≤–∞:</b>\n'
        for name, value in pairs(stats.creatures) do
            if type(value) == 'number' then
                message = message
                    .. '  ‚Ä¢ '
                    .. name
                    .. ': '
                    .. tostring(value)
                    .. '\n'
            else
                message = message .. '  ‚Ä¢ ' .. name .. ': ' .. value .. '\n'
            end
        end
        message = message .. '\n'
    else
        message = message
            .. 'üêâ <b>–°—É—â–µ—Å—Ç–≤–∞:</b> –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—É—â–µ—Å—Ç–≤–∞–º\n\n'
    end

    -- –¢–æ–∫–µ–Ω—ã
    if next(stats.tokens) then
        message = message .. 'ü™ô <b>–¢–æ–∫–µ–Ω—ã:</b>\n'
        for name, value in pairs(stats.tokens) do
            message = message
                .. '  ‚Ä¢ '
                .. name
                .. ': '
                .. tostring(value)
                .. '\n'
        end
    else
        message = message .. 'ü™ô <b>–¢–æ–∫–µ–Ω—ã:</b> –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤\n'
    end

    return message
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è)
local function buyTokens(tokenName, amount)
    local purchaseRemote = ReplicatedStorage:WaitForChild('Remotes')
        :WaitForChild('PurchaseItemRemote')
    local args = { tokenName }
    local successCount = 0
    local failedCount = 0

    -- –°—É–ø–µ—Ä –±—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
    for i = 1, amount do
        local success, result = pcall(function()
            return purchaseRemote:InvokeServer(unpack(args))
        end)

        if success then
            successCount = successCount + 1
        else
            failedCount = failedCount + 1
            if failedCount <= 3 then -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∞–º –æ—à–∏–±–∫–∞–º–∏
                warn(
                    '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ '
                        .. tokenName
                        .. ': '
                        .. tostring(result)
                )
            end
        end
    end

    print(
        '‚úÖ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ '
            .. tokenName
            .. ': '
            .. successCount
            .. '/'
            .. amount
    )
    return successCount, failedCount
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ lastUpdateId (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
local function resetLastUpdateId()
    lastUpdateId = 0
    saveLastUpdateId(0)
    print("üîÑ LastUpdateId —Å–±—Ä–æ—à–µ–Ω –¥–æ 0")
end

-- –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastUpdateId –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
resetLastUpdateId()

print("ü§ñ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /stats –∏ /buy")

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
while true do
    local success, messages = pcall(checkTelegramMessages)
    
    if success then
        for _, update in ipairs(messages) do
            if update.message and update.message.text then
                local text = update.message.text
                local chat_id = update.message.chat.id
                local username = update.message.from.username
                    or update.message.from.first_name

                print("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " .. username .. ": " .. text)

                -- –ö–æ–º–∞–Ω–¥–∞ /stats (–Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                if text:lower() == '/stats' then
                    print(
                        'üìä –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stats –æ—Ç '
                            .. username
                    )

                    -- –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    local stats = collectStats()
                    local message = formatStats(stats)
                    sendToTelegram(chat_id, message)

                -- –ö–æ–º–∞–Ω–¥–∞ /buy (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
                elseif
                    text:sub(1, 1) == '/'
                    and text:sub(1, 5):lower() == '/buy '
                then
                    print(
                        'üõí –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –æ—Ç '
                            .. username
                    )

                    -- –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
                    local parts = {}
                    for part in text:gmatch('%S+') do
                        table.insert(parts, part)
                    end

                    if #parts >= 3 then
                        local tokenName = parts[2] -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä!
                        local amount = tonumber(parts[3])

                        if amount and amount > 0 then
                            sendToTelegram(
                                chat_id,
                                'üõí <b>–ù–∞—á–∏–Ω–∞—é –ø–æ–∫—É–ø–∫—É...</b>\n–¢–æ–∫–µ–Ω: '
                                    .. tokenName
                                    .. '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: '
                                    .. amount
                            )

                            -- –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
                            local boughtCount, failedCount =
                                buyTokens(tokenName, amount)

                            -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            local resultMessage =
                                '‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n'
                            resultMessage = resultMessage
                                .. '–¢–æ–∫–µ–Ω: '
                                .. tokenName
                                .. '\n'
                            resultMessage = resultMessage
                                .. '–ó–∞–ø—Ä–æ—à–µ–Ω–æ: '
                                .. amount
                                .. '\n'
                            resultMessage = resultMessage
                                .. '–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ: '
                                .. boughtCount
                                .. '\n'

                            if failedCount > 0 then
                                resultMessage = resultMessage
                                    .. '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å: '
                                    .. failedCount
                                    .. '\n'
                            end

                            sendToTelegram(chat_id, resultMessage)
                        else
                            sendToTelegram(
                                chat_id,
                                '‚ùå <b>–û—à–∏–±–∫–∞!</b>\n–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy –ù–∞–∑–≤–∞–Ω–∏–µ–¢–æ–∫–µ–Ω–∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                            )
                        end
                    else
                        sendToTelegram(
                            chat_id,
                            '‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy –ù–∞–∑–≤–∞–Ω–∏–µ–¢–æ–∫–µ–Ω–∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–ü—Ä–∏–º–µ—Ä: /buy RandomStoredCreatureToken 100'
                        )
                    end
                
                -- –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ lastUpdateId (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                elseif text:lower() == '/reset' then
                    resetLastUpdateId()
                    sendToTelegram(chat_id, "üîÑ LastUpdateId —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                end
            end
        end
    else
        warn("‚ùå –û—à–∏–±–∫–∞ –≤ checkTelegramMessages: " .. tostring(messages))
    end

    wait(3) -- –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 3 —Å–µ–∫—É–Ω–¥
end
