local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local TradeGui = player.PlayerGui:WaitForChild("Trade")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

-- Настройки
local FARM_WORLD = 5233782396
local REQUIRED_AMOUNT = 12000
local ITEM_TYPE = "Shoom"
local COOLDOWN = 6
local MAX_ATTEMPTS = 30
local TRADE_DISTANCE = 15

-- Однократный телепорт к дереву
local target = game:GetService('Workspace')['Map Assets'].Trees.BoarderTree.Leaves
local function teleportToTarget()
    local rootPart = character:FindFirstChild('HumanoidRootPart') or character:WaitForChild('HumanoidRootPart')
    rootPart.CFrame = target.CFrame + Vector3.new(0, 3, 0)
    print("Телепорт к дереву выполнен")
end
teleportToTarget()

-- Логирование
local function log(msg)
    print("[TRADE BOT]", os.date("%H:%M:%S"), msg)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Трейд бот",
        Text = msg,
        Duration = 5
    })
end

-- Определение роли (true = получатель, false = отправитель)
local function determineRole()
    local coins = player.Data.Coins.Value
    if coins < 100000 then
        log("Определена роль: ПОЛУЧАТЕЛЬ (баланс: "..coins..")")
        return true
    else
        log("Определена роль: ОТПРАВИТЕЛЬ (баланс: "..coins..")")
        return false
    end
end

-- Поиск партнера
local function findTradePartner()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= player and plr.Character then
            local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
            if hrp and (hrp.Position - character.HumanoidRootPart.Position).Magnitude < TRADE_DISTANCE then
                return plr
            end
        end
    end
    return nil
end

-- Отправка запроса на трейд
local function sendTradeRequest(partner)
    for attempt = 1, 3 do
        ReplicatedStorage.TradeMasterEvent:FireServer("RequestTradeWithAsync", partner)
        log("Отправка запроса трейда (попытка "..attempt..")")
        
        local waitTime = 0
        while waitTime < 5 do
            if TradeGui.Enabled then return true end
            waitTime = waitTime + 0.5
            task.wait(0.5)
        end
    end
    return false
end

-- Логика получателя
local function receiverLogic()
    log("Ожидаю грибы от партнера...")
    
    local attempts = 0
    while attempts < MAX_ATTEMPTS do
        if not TradeGui.Enabled then break end
        
        local allCorrect = true
        for i = 1, 3 do
            local cell = TradeGui.BG.You[tostring(i)].TextLabel
            if not cell or tonumber(cell.Text) ~= REQUIRED_AMOUNT then
                allCorrect = false
                break
            end
        end
        
        if allCorrect then
            ReplicatedStorage.TradeMasterEvent:FireServer("ToggleReadyStateAsync")
            log("Трейд успешно завершен (получено 3x"..REQUIRED_AMOUNT..")")
            return true
        end
        
        attempts = attempts + 1
        task.wait(1)
    end
    log("Не удалось получить грибы")
    return false
end

-- Логика отправителя
local function senderLogic()
    log("Отправляю грибы партнеру...")
    
    -- Отправка грибов
    for i = 1, 3 do
        ReplicatedStorage.TradeMasterEvent:FireServer("AddItemAsync", {
            Amount = REQUIRED_AMOUNT,
            Type = ITEM_TYPE
        })
        task.wait(0.5)
    end
    
    -- Ожидание подтверждения
    local attempts = 0
    while attempts < MAX_ATTEMPTS do
        if not TradeGui.Enabled then break end
        
        if TradeGui.BG.Player2Ready.Text == "They Accepted" then
            ReplicatedStorage.TradeMasterEvent:FireServer("ToggleReadyStateAsync")
            log("Партнер подтвердил трейд!")
            
            -- Проверка баланса для телепорта
            if player.Data.Coins.Value < 13000 then
                log("Баланс низкий, телепортируюсь...")
                TeleportService:Teleport(FARM_WORLD, player)
            end
            return true
        end
        
        attempts = attempts + 1
        task.wait(1)
    end
    log("Партнер не подтвердил трейд")
    return false
end

-- Основной цикл
local function main()
    while true do
        local isReceiver = determineRole()
        local partner = findTradePartner()
        
        if partner then
            log("Найден партнер: "..partner.Name)
            
            if sendTradeRequest(partner) then
                if isReceiver then
                    receiverLogic()
                else
                    senderLogic()
                end
            end
        else
            log("Партнер не найден в радиусе "..TRADE_DISTANCE.." studs")
        end
        
        log("Ожидание кулдауна "..COOLDOWN.." сек...")
        task.wait(COOLDOWN)
    end
end

-- Запуск
log("Автотрейдер запущен!")
pcall(main)
