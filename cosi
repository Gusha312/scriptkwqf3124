local player = game:GetService('Players').LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local TradeGui = player.PlayerGui:WaitForChild('Trade')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Players = game:GetService('Players')
local TeleportService = game:GetService('TeleportService')

-- Настройки
local FARM_WORLD = 5233782396
local REQUIRED_AMOUNT = 12000
local ITEM_TYPE = 'Shoom'
local COOLDOWN = 6
local MAX_ATTEMPTS = 30
local TRADE_DISTANCE = 15
local TARGET_BALANCE = 2868000 -- Баланс для смены роли

-- Фиксированная роль (определяется при старте)
local fixedRole = nil
local initialBalance = player.Data.Coins.Value
if initialBalance < TARGET_BALANCE then
    fixedRole = 'RECEIVER'
else
    fixedRole = 'SENDER'
end

-- Телепорт к дереву (однократно)
local target =
    game:GetService('Workspace')['Map Assets'].Trees.BoarderTree.Leaves
local function teleportToTarget()
    local rootPart = character:FindFirstChild('HumanoidRootPart')
        or character:WaitForChild('HumanoidRootPart')
    rootPart.CFrame = target.CFrame + Vector3.new(0, 3, 0)
    print('Телепорт к дереву выполнен')
end
teleportToTarget()

-- Логирование
local function log(msg)
    print('[TRADE BOT]', os.date('%H:%M:%S'), msg)
    game:GetService('StarterGui'):SetCore('SendNotification', {
        Title = 'Трейд бот',
        Text = msg,
        Duration = 5,
    })
end

-- Проверка необходимости смены роли
local function checkRoleChange()
    if
        fixedRole == 'RECEIVER'
        and player.Data.Coins.Value >= TARGET_BALANCE
    then
        log(
            'Достигнут целевой баланс! Телепортируюсь...'
        )
        TeleportService:Teleport(FARM_WORLD, player)
        return true
    end
    return false
end

-- Поиск партнера
local function findTradePartner()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= player and plr.Character then
            local hrp = plr.Character:FindFirstChild('HumanoidRootPart')
            if
                hrp
                and (hrp.Position - character.HumanoidRootPart.Position).Magnitude
                    < TRADE_DISTANCE
            then
                return plr
            end
        end
    end
    return nil
end

-- Отправка запроса на трейд
local function sendTradeRequest(partner)
    for attempt = 1, 3 do
        ReplicatedStorage.TradeMasterEvent:FireServer(
            'RequestTradeWithAsync',
            partner
        )
        log(
            'Отправка запроса трейда (попытка '
                .. attempt
                .. ')'
        )

        local waitTime = 0
        while waitTime < 5 do
            if checkRoleChange() then
                return false
            end
            if TradeGui.Enabled then
                return true
            end
            waitTime = waitTime + 0.5
            task.wait(0.5)
        end
    end
    return false
end

-- Логика получателя (жестко фиксирована)
local function receiverLogic()
    log('Ожидаю грибы от партнера...')

    local attempts = 0
    while attempts < MAX_ATTEMPTS and TradeGui.Enabled do
        if checkRoleChange() then
            return false
        end

        local allCorrect = true
        for i = 1, 3 do
            local cell = TradeGui.BG.Them[tostring(i)].TextLabel
            if not cell or tonumber(cell.Text) ~= REQUIRED_AMOUNT then
                allCorrect = false
                break
            end
        end

        if allCorrect then
            ReplicatedStorage.TradeMasterEvent:FireServer(
                'ToggleReadyStateAsync'
            )
            log(
                'Трейд завершен. Получено: 3x'
                    .. REQUIRED_AMOUNT
            )
            return true
        end

        attempts = attempts + 1
        task.wait(1)
    end
    log('Не удалось получить грибы')
    return false
end

-- Логика отправителя (жестко фиксирована)
local function senderLogic()
    log('Отправляю грибы партнеру...')

    -- Отправка предметов
    for i = 1, 3 do
        if player.Data.Coins.Value < REQUIRED_AMOUNT then
            log(
                'Недостаточно средств для отправки!'
            )
            return false
        end

        ReplicatedStorage.TradeMasterEvent:FireServer('AddItemAsync', {
            Amount = REQUIRED_AMOUNT,
            Type = ITEM_TYPE,
        })
        task.wait(0.5)
    end

    -- Ожидание подтверждения
    local attempts = 0
    while attempts < MAX_ATTEMPTS and TradeGui.Enabled do
        local readyText = TradeGui.BG:FindFirstChild('Player2Ready')
                and TradeGui.BG.Player2Ready.Text
            or ''

        if
            readyText:match('They Accepted') or readyText:match('Готов')
        then
            ReplicatedStorage.TradeMasterEvent:FireServer(
                'ToggleReadyStateAsync'
            )
            log('Трейд подтвержден партнером!')

            if player.Data.Coins.Value < 13000 then
                log(
                    'Баланс исчерпан, телепортируюсь...'
                )
                TeleportService:Teleport(FARM_WORLD, player)
            end
            return true
        end

        attempts = attempts + 1
        task.wait(1)
    end
    log('Партнер не подтвердил трейд')
    return false
end

-- Основной цикл
local function main()
    log('Старт работы. Роль: ' .. fixedRole)

    while true do
        if checkRoleChange() then
            break
        end -- Выход если достигнут целевой баланс

        local partner = findTradePartner()

        if partner then
            log('Начало трейда с: ' .. partner.Name)

            if sendTradeRequest(partner) then
                if fixedRole == 'RECEIVER' then
                    receiverLogic()
                else
                    senderLogic()
                end
            end
        else
            log('Партнер не найден рядом')
        end

        log('Ожидание ' .. COOLDOWN .. ' сек...')
        task.wait(COOLDOWN)
    end
end

-- Запуск
pcall(main)
