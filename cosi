local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local TradeGui = player.PlayerGui:WaitForChild("Trade")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Телепорт к дереву перед началом
local target = game:GetService('Workspace')['Map Assets'].Trees.BoarderTree.Leaves
local function teleportToTarget()
    local rootPart = character:WaitForChild('HumanoidRootPart')
    rootPart.CFrame = target.CFrame + Vector3.new(0, 3, 0)
    print("Телепортирован к дереву")
end
teleportToTarget()

-- Настройки трейдинга
local REQUIRED_AMOUNT = 12000
local COOLDOWN = 6
local ITEM_TYPE = "Shoom"
local TRADE_PARTNER = nil -- Будет определяться автоматически

-- Логирование
local function log(msg)
    print("[AUTO TRADE]", os.date("%H:%M:%S"), msg)
end

-- Поиск партнера для трейда
local function findTradePartner()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= player and plr.Character then
            local distance = (plr.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
            if distance < 15 then -- Если игрок рядом
                return plr
            end
        end
    end
    return nil
end

-- Проверка активности трейда
local function isTradeActive()
    return TradeGui.Enabled and TradeGui.BG:FindFirstChild("You") and TradeGui.BG:FindFirstChild("Them")
end

-- Основной цикл
while true do
    -- Определяем роль по балансу
    local coins = player.Data.Coins.Value
    local isReceiver = coins < 100000

    -- Находим партнера
    TRADE_PARTNER = findTradePartner()
    
    if TRADE_PARTNER then
        log("Найден партнер: @"..TRADE_PARTNER.Name)
        
        if isReceiver then
            log("Режим: ПОЛУЧАТЕЛЬ | Баланс: "..coins)
            
            -- Ждем когда партнер положит грибы
            local attempts = 0
            while attempts < 30 do
                if isTradeActive() then
                    local allCorrect = true
                    for i = 1, 3 do
                        local cellValue = tonumber(TradeGui.BG.You[tostring(i)].TextLabel.Text) or 0
                        if cellValue ~= REQUIRED_AMOUNT then
                            allCorrect = false
                            break
                        end
                    end
                    
                    if allCorrect then
                        ReplicatedStorage.TradeMasterEvent:FireServer("ToggleReadyStateAsync")
                        log("Все грибы получены! Трейд принят.")
                        break
                    end
                end
                attempts += 1
                task.wait(1)
            end
            
        else
            log("Режим: ОТПРАВИТЕЛЬ | Баланс: "..coins)
            
            -- Отправляем грибы
            for _ = 1, 3 do
                ReplicatedStorage.TradeMasterEvent:FireServer("AddItemAsync", {
                    Amount = REQUIRED_AMOUNT,
                    Type = ITEM_TYPE
                })
                task.wait(0.5)
            end
            log("Грибы отправлены")
            
            -- Ждем подтверждения
            local attempts = 0
            while attempts < 30 do
                if isTradeActive() and TradeGui.BG.Player2Ready.Text == "They Accepted" then
                    ReplicatedStorage.TradeMasterEvent:FireServer("ToggleReadyStateAsync")
                    log("Партнер подтвердил трейд!")
                    break
                end
                attempts += 1
                task.wait(1)
            end
        end
    else
        log("Партнер не найден рядом")
    end
    
    log("Ожидание кулдауна "..COOLDOWN.." сек...")
    task.wait(COOLDOWN)
    
    -- Периодическая телепортация
    if math.random(1, 3) == 1 then
        teleportToTarget()
    end
end
