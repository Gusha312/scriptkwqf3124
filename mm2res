local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local HttpService = game:GetService('HttpService')
local player = Players.LocalPlayer

-- –ù–ê–°–¢–†–û–ô–ö–ò
local traderName = 'NeonSpectre421'
local SERVER_URL = 'https://v409755.hosted-by-vdsina.ru:3000'
local DEBUG_LOG_PATH = 'FluentSettings/trade_logs.txt'
local REQUEST_DELAY = 1
local TRADE_TIMEOUT = 30
local CHECK_INTERVAL = 5
local DEBUG_MODE = true
local MAX_CREATURE_SLOTS = 20 -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
local function initFiles()
    if not isfolder("FluentSettings") then
        makefolder("FluentSettings")
    end
    if not isfile(DEBUG_LOG_PATH) then
        writefile(DEBUG_LOG_PATH, "=== Trade Log Started ===\n")
    end
end

-- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
local function log(message)
    local logMessage = "["..os.date("%X").."] "..message
    if DEBUG_MODE then print(logMessage) end
    pcall(function()
        appendfile(DEBUG_LOG_PATH, logMessage.."\n")
    end)
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
local function checkServer()
    local script = [[
        local url = "]]..SERVER_URL..[[/orders"
        local success, response = pcall(function()
            return game:HttpGet(url, false)
        end)
        return success and "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω" or "‚ùå –û—à–∏–±–∫–∞: "..tostring(response)
    ]]
    local status = loadstring(script)()
    log(status)
    return status:find("‚úÖ") ~= nil
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
local function getOrders()
    if not checkServer() then return {} end

    local script = [[
        local url = "]]..SERVER_URL..[[/orders?_="..tostring(tick())
        local success, response = pcall(function()
            return game:HttpGet(url, false)
        end)
        if not success then return "ERROR|"..tostring(response) end
        return response
    ]]

    local loadFunc = loadstring(script)
    if not loadFunc then
        log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ loadstring")
        return {}
    end

    local success, response = pcall(loadFunc)
    if not success then
        log("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: "..tostring(response))
        return {}
    end

    if response:sub(1,6) == "ERROR|" then
        log("‚ùå –û—à–∏–±–∫–∞ HTTP: "..response:sub(7))
        return {}
    end

    log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:")
    log(response)

    local orders = {}
    for line in response:gmatch("[^\r\n]+") do
        local cleanLine = line:gsub("%s+", "")
        
        -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–≥—Ä–∏–±—ã, —Ç–æ–∫–µ–Ω—ã)
        local typ, nick, amount = cleanLine:match("^(%w+):([%w_]+):(%d+)$")
        
        -- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        local creatureTyp, creatureNick, creatureName, creatureAmount = cleanLine:match("^(creature):([%w_]+):([%w%s]+):(%d+)$")
        
        if typ and nick and amount then
            if not orders[nick] then
                orders[nick] = {
                    shrooms = 0,
                    revive = 0,
                    fullgrow = 0,
                    creatures = {},
                    rawLines = {}
                }
            end

            amount = tonumber(amount)
            if typ == "shrooms" then
                orders[nick].shrooms = orders[nick].shrooms + amount
            elseif typ == "revive" then
                orders[nick].revive = orders[nick].revive + amount
            elseif typ == "fullgrow" then
                orders[nick].fullgrow = orders[nick].fullgrow + amount
            end

            table.insert(orders[nick].rawLines, cleanLine)
            log("üîç –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑: "..cleanLine)
            
        elseif creatureTyp and creatureNick and creatureName and creatureAmount then
            if not orders[creatureNick] then
                orders[creatureNick] = {
                    shrooms = 0,
                    revive = 0,
                    fullgrow = 0,
                    creatures = {},
                    rawLines = {}
                }
            end

            creatureAmount = tonumber(creatureAmount)
            orders[creatureNick].creatures[creatureName] = (orders[creatureNick].creatures[creatureName] or 0) + creatureAmount
            table.insert(orders[creatureNick].rawLines, cleanLine)
            log("üîç –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ: "..cleanLine)
        else
            log("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: "..line)
        end
    end

    return orders
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤ –≤ —Å–ª–æ—Ç–∞—Ö
local function verifyCreaturesInTrade(expectedCreatures)
    wait(2) -- –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    local offersFrame = player.PlayerGui.TradeGui.ContainerFrame.Yours.OffersFrame.ScrollingFrame
    if not offersFrame then
        warn("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ—Ä–µ–π–º —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏!")
        return false
    end

    local foundCreatures = {}
    local children = offersFrame:GetChildren()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã 13-20 –¥–ª—è —Å—É—â–µ—Å—Ç–≤
    for slot = 13, MAX_CREATURE_SLOTS do
        if children[slot] and children[slot]:FindFirstChild("ItemFrame") then
            local itemFrame = children[slot].ItemFrame
            if itemFrame:FindFirstChild("NameLabel") then
                local creatureName = itemFrame.NameLabel.Text
                if expectedCreatures[creatureName] then
                    foundCreatures[creatureName] = true
                    log("‚úÖ –°—É—â–µ—Å—Ç–≤–æ "..creatureName.." –≤ —Å–ª–æ—Ç–µ "..slot)
                end
            end
        end
    end

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ —Å—É—â–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω—ã
    for creatureName in pairs(expectedCreatures) do
        if not foundCreatures[creatureName] then
            warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ: "..creatureName)
            return false
        end
    end

    return true
end

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤ –≤ —Ç—Ä–µ–π–¥
local function addCreatures(tradeRemote, creatures)
    for creatureName, amount in pairs(creatures) do
        local success, response = pcall(function()
            return tradeRemote:InvokeServer("AddTradeItem", {
                ItemType = "Creatures",
                Name = creatureName,
                Amount = amount,
                Overwrite = true
            })
        end)
        
        if success then
            log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ: "..creatureName.." ("..amount.." —à—Ç.)")
        else
            log("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∞: "..tostring(response))
            return false
        end
        
        wait(1.5) -- –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    end
    
    return true
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–π–¥–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—É—â–µ—Å—Ç–≤)
local function processTrade(nick, shrooms, revive, fullgrow, creatures, rawLines)
    log("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–π–¥ —Å "..nick)
    
    -- –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
    local target = Players:FindFirstChild(nick) or Players:GetPlayerByUserId(tonumber(nick) or 0)
    if not target then
        log("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return false
    end

    -- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç—Ä–µ–π–¥
    local requestRemote = player.Remotes:FindFirstChild("TradeRequestRemote")
    if not requestRemote then
        log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TradeRequestRemote")
        return false
    end

    -- –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Ç—Ä–µ–π–¥–∞
    local tradeGui
    for i = 1, 60 do
        requestRemote:FireServer("SendRequest", target)
        tradeGui = player.PlayerGui:FindFirstChild("TradeGui")
        if tradeGui and tradeGui.Enabled then break end
        wait(REQUEST_DELAY)
    end

    if not tradeGui then
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–π–¥")
        return false
    end

    -- –ü–æ–ª—É—á–∞–µ–º Remote –¥–ª—è —Ç—Ä–µ–π–¥–∞
    local tradeRemote = ReplicatedStorage.Remotes:FindFirstChild(traderName.."-"..nick.."TradeRemote")
    if not tradeRemote then
        log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TradeRemote")
        return false
    end

    -- –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if shrooms and shrooms > 0 then
        log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∏–±—ã: "..shrooms)
        tradeRemote:InvokeServer("AddTradeItem", {
            ItemType = "Currency",
            Name = "Shooms",
            Amount = shrooms
        })
        wait(0.5)
    end

    if revive and revive > 0 then
        log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º revive —Ç–æ–∫–µ–Ω—ã: "..revive)
        tradeRemote:InvokeServer("AddTradeItem", {
            ItemType = "Tokens",
            Name = "CreatureReviveToken",
            Amount = revive
        })
        wait(0.5)
    end

    if fullgrow and fullgrow > 0 then
        log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º fullgrow —Ç–æ–∫–µ–Ω—ã: "..fullgrow)
        tradeRemote:InvokeServer("AddTradeItem", {
            ItemType = "Tokens",
            Name = "FullGrowToken",
            Amount = fullgrow
        })
        wait(0.5)
    end

    -- –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if creatures and next(creatures) then
        log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤:")
        for name, amount in pairs(creatures) do
            log("  "..name..": "..amount)
        end
        
        if not addCreatures(tradeRemote, creatures) then
            log("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤")
            player.PlayerGui.TradeGui.Enabled = false
            return false
        end
        
        if not verifyCreaturesInTrade(creatures) then
            log("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            player.PlayerGui.TradeGui.Enabled = false
            return false
        end
    end

    -- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–µ–π–¥
    log("üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–µ–π–¥...")
    local startTime = os.time()
    local tradeCompleted = false
    
    while os.time() - startTime < TRADE_TIMEOUT do
        tradeRemote:InvokeServer("AcceptTrade")
        
        if not player.PlayerGui:FindFirstChild("TradeGui") then
            tradeCompleted = true
            break
        end
        
        wait(0.3)
    end

    -- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
    if tradeCompleted then
        log("üéâ –¢—Ä–µ–π–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        -- –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        for _, line in ipairs(rawLines) do
            log(deleteServerOrder(line))
            wait(0.3)
        end
        return true
    else
        log("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Ç—Ä–µ–π–¥–∞")
        return false
    end
end

-- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
initFiles()
log("\n===== –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê =====")

while wait(CHECK_INTERVAL) do
    log("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ ===")
    local orders = getOrders()
    
    for nick, data in pairs(orders) do
        log("\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è "..nick)
        log("üçÑ –ì—Ä–∏–±—ã: "..(data.shrooms or 0))
        log("üíä Revive: "..(data.revive or 0))
        log("üå± FullGrow: "..(data.fullgrow or 0))
        
        if data.creatures and next(data.creatures) then
            log("üêæ –°—É—â–µ—Å—Ç–≤–∞:")
            for name, amount in pairs(data.creatures) do
                log("  "..name..": "..amount)
            end
        end
        
        coroutine.wrap(processTrade)(
            nick,
            data.shrooms,
            data.revive,
            data.fullgrow,
            data.creatures,
            data.rawLines
        )
        
        wait(2) -- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–µ–π–¥–∞–º–∏
    end
end
